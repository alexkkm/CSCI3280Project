{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u6587\\u4EF6\\\\GitHub\\\\CSCI3280Project\\\\client\\\\src\\\\AudioScript\\\\LrcDisplayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LrcDisplayer(_ref) {\n  _s();\n  let {\n    music,\n    currentTime\n  } = _ref;\n  var lyricsTextFilePath = music.lyricsPath;\n  const [lyrics, setLyrics] = useState([]);\n  const [currentLyricsIndex, setCurrentLyricsIndex] = useState(-1);\n  useEffect(() => {\n    if (lyricsTextFilePath === undefined || lyricsTextFilePath === null || lyricsTextFilePath === '') {\n      return;\n    }\n    // fetch lyrics text file and parse it\n    if (lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt') {\n      if (lyricsTextFilePath.substring(0, 9) === 'blob:http') lyricsTextFilePath = lyricsTextFilePath.substring(0, lyricsTextFilePath.length - 4);\n      // fetch lyrics text file and set as lyrics state variable\n      console.log(lyricsTextFilePath);\n      fetch(lyricsTextFilePath).then(response => response.text()).then(text => setLyrics([{\n        time: 0,\n        text\n      }]));\n    } else {\n      // lrc file\n      if (lyricsTextFilePath.substring(0, 9) === 'blob:http') lyricsTextFilePath = lyricsTextFilePath.substring(0, lyricsTextFilePath.length - 4);\n      console.log(lyricsTextFilePath);\n      fetch(lyricsTextFilePath).then(response => response.text()).then(text => {\n        const dummyStart = ['[00:00.00].\\n', '[00:00.00]... \\n'];\n        const dummyEnd = ['[99:99.99]... \\n', '[99:99.99]. '];\n        const lyricsArray = dummyStart.concat(text.split('\\n')).concat(dummyEnd);\n        const regex = /\\[(\\d{2}):(\\d{2})\\.(\\d{2,3})\\](.*)/;\n        const parsedLyrics = lyricsArray.reduce((acc, line) => {\n          const match = line.match(regex);\n          if (match) {\n            const minutes = parseInt(match[1], 10);\n            const seconds = parseInt(match[2], 10);\n            const milliseconds = parseInt(match[3], 10);\n            let text = match[4];\n            const time = minutes * 60 + seconds + milliseconds / 1000;\n            acc.push({\n              time,\n              text\n            });\n          }\n          return acc;\n        }, []);\n        setLyrics(parsedLyrics);\n      });\n    }\n  }, [lyricsTextFilePath]);\n  useEffect(() => {\n    if (lyricsTextFilePath === undefined || lyricsTextFilePath === null || lyricsTextFilePath === '') {\n      return;\n    }\n    if (lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt') {\n      return;\n    }\n    // find the current lyrics based on the current time\n    const currentLyricsIndex = lyrics.findIndex((l, i) => {\n      const nextLyricsTime = lyrics[i + 1] ? lyrics[i + 1].time : Infinity;\n      return l.time <= currentTime && nextLyricsTime > currentTime;\n    });\n    setCurrentLyricsIndex(currentLyricsIndex);\n  }, [lyrics, currentTime, lyricsTextFilePath]);\n  const getLyricsToDisplay = () => {\n    if (lyricsTextFilePath === undefined || lyricsTextFilePath === null || lyricsTextFilePath === '') {\n      return [];\n    }\n    if (lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt') {\n      return lyrics;\n    }\n    if (lyrics.length === 0) {\n      return [];\n    }\n    if (lyrics.length <= 5) {\n      return lyrics;\n    }\n    if (currentLyricsIndex === -1 || currentLyricsIndex < 2) {\n      // show first 5 lyrics if currentLyrics is not found or it's within the first 2 lyrics\n      return lyrics.slice(0, 5);\n    }\n    if (currentLyricsIndex >= lyrics.length - 2) {\n      // show last 5 lyrics if currentLyrics is within the last 2 lyrics\n      return lyrics.slice(lyrics.length - 5, lyrics.length);\n    }\n\n    // show 2 lyrics before, currentLyrics, and 2 lyrics after\n    return lyrics.slice(currentLyricsIndex - 2, currentLyricsIndex + 3);\n  };\n  const lyricsToDisplay = getLyricsToDisplay();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxHeight: '400px',\n      maxWidth: '400px',\n      overflow: 'auto'\n    },\n    children: lyricsToDisplay.map((lyric, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      style: lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt' ? {\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap'\n      } : {\n        textAlign: 'center',\n        fontWeight: currentLyricsIndex === lyrics.indexOf(lyric) ? 'bold' : 'normal'\n      },\n      children: lyric.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(LrcDisplayer, \"JdMrr/LUROOMhADS2zWKt6jZnZo=\");\n_c = LrcDisplayer;\nexport default LrcDisplayer;\nvar _c;\n$RefreshReg$(_c, \"LrcDisplayer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LrcDisplayer","_ref","_s","music","currentTime","lyricsTextFilePath","lyricsPath","lyrics","setLyrics","currentLyricsIndex","setCurrentLyricsIndex","undefined","substring","length","console","log","fetch","then","response","text","time","dummyStart","dummyEnd","lyricsArray","concat","split","regex","parsedLyrics","reduce","acc","line","match","minutes","parseInt","seconds","milliseconds","push","findIndex","l","i","nextLyricsTime","Infinity","getLyricsToDisplay","slice","lyricsToDisplay","style","maxHeight","maxWidth","overflow","children","map","lyric","index","textAlign","whiteSpace","fontWeight","indexOf","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/文件/GitHub/CSCI3280Project/client/src/AudioScript/LrcDisplayer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction LrcDisplayer({ music, currentTime }) {\r\n\r\n  var lyricsTextFilePath = music.lyricsPath;\r\n\r\n  const [lyrics, setLyrics] = useState([]);\r\n  const [currentLyricsIndex, setCurrentLyricsIndex] = useState(-1);\r\n\r\n  useEffect(() => {\r\n    if (lyricsTextFilePath === undefined || lyricsTextFilePath === null || lyricsTextFilePath === '') {\r\n      return;\r\n    }\r\n    // fetch lyrics text file and parse it\r\n    if (lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt') {\r\n      if (lyricsTextFilePath.substring(0, 9) === 'blob:http') \r\n        lyricsTextFilePath = lyricsTextFilePath.substring(0, lyricsTextFilePath.length - 4);\r\n      // fetch lyrics text file and set as lyrics state variable\r\n      console.log(lyricsTextFilePath);\r\n      fetch(lyricsTextFilePath)\r\n        .then(response => response.text())\r\n        .then(text => setLyrics([{ time: 0, text }]));\r\n    }\r\n    else { // lrc file\r\n      if (lyricsTextFilePath.substring(0, 9) === 'blob:http') \r\n        lyricsTextFilePath = lyricsTextFilePath.substring(0, lyricsTextFilePath.length - 4);\r\n      console.log(lyricsTextFilePath);\r\n      fetch(lyricsTextFilePath)\r\n        .then(response => response.text())\r\n        .then(text => {\r\n          const dummyStart = ['[00:00.00].\\n', '[00:00.00]... \\n'];\r\n          const dummyEnd = ['[99:99.99]... \\n', '[99:99.99]. '];\r\n          const lyricsArray = dummyStart.concat(text.split('\\n')).concat(dummyEnd);\r\n          const regex = /\\[(\\d{2}):(\\d{2})\\.(\\d{2,3})\\](.*)/;\r\n          const parsedLyrics = lyricsArray.reduce((acc, line) => {\r\n\r\n            const match = line.match(regex);\r\n            if (match) {\r\n              const minutes = parseInt(match[1], 10);\r\n              const seconds = parseInt(match[2], 10);\r\n              const milliseconds = parseInt(match[3], 10);\r\n              let text = match[4];\r\n              const time = minutes * 60 + seconds + milliseconds / 1000;\r\n              acc.push({ time, text });\r\n            }\r\n            return acc;\r\n          }, []);\r\n          setLyrics(parsedLyrics);\r\n        });\r\n    }\r\n  }, [lyricsTextFilePath]);\r\n\r\n  useEffect(() => {\r\n    if (lyricsTextFilePath === undefined || lyricsTextFilePath === null || lyricsTextFilePath === '') {\r\n      return;\r\n    }\r\n    if (lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt') {\r\n      return;\r\n    }\r\n    // find the current lyrics based on the current time\r\n    const currentLyricsIndex = lyrics.findIndex((l, i) => {\r\n      const nextLyricsTime = lyrics[i + 1] ? lyrics[i + 1].time : Infinity;\r\n      return l.time <= currentTime && nextLyricsTime > currentTime;\r\n    });\r\n    setCurrentLyricsIndex(currentLyricsIndex);\r\n  }, [lyrics, currentTime, lyricsTextFilePath]);\r\n\r\n  const getLyricsToDisplay = () => {\r\n    if (lyricsTextFilePath === undefined || lyricsTextFilePath === null || lyricsTextFilePath === '') {\r\n      return [];\r\n    }\r\n    if (lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt') {\r\n      return lyrics;\r\n    }\r\n\r\n    if (lyrics.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (lyrics.length <= 5) {\r\n      return lyrics;\r\n    }\r\n\r\n    if (currentLyricsIndex === -1 || currentLyricsIndex < 2) {\r\n      // show first 5 lyrics if currentLyrics is not found or it's within the first 2 lyrics\r\n      return lyrics.slice(0, 5);\r\n    }\r\n\r\n    if (currentLyricsIndex >= lyrics.length - 2) {\r\n      // show last 5 lyrics if currentLyrics is within the last 2 lyrics\r\n      return lyrics.slice(lyrics.length - 5, lyrics.length);\r\n    }\r\n\r\n    // show 2 lyrics before, currentLyrics, and 2 lyrics after\r\n    return lyrics.slice(currentLyricsIndex - 2, currentLyricsIndex + 3);\r\n  };\r\n\r\n  const lyricsToDisplay = getLyricsToDisplay();\r\n\r\n  return (\r\n    <div style={{ maxHeight: '400px', maxWidth: '400px', overflow: 'auto' }}>\r\n      {lyricsToDisplay.map((lyric, index) => (\r\n        <p key={index} style={lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt' ?\r\n          { textAlign: 'center', whiteSpace: 'pre-wrap' } :\r\n          { textAlign: 'center', fontWeight: currentLyricsIndex === lyrics.indexOf(lyric) ? 'bold' : 'normal' }}>\r\n          {lyric.text}\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LrcDisplayer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}