{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u6587\\u4EF6\\\\GitHub\\\\CSCI3280Project\\\\client\\\\src\\\\AudioScript\\\\MusicVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicVisualizer = _ref => {\n  _s();\n  let {\n    audioContext,\n    analyser,\n    width,\n    height\n  } = _ref;\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // Get the canvas element and its context\n    const canvas = canvasRef.current;\n    const canvasContext = canvas.getContext(\"2d\");\n    if (analyser !== null) {\n      // Create a new array to hold the frequency data\n      const dataArray = new Uint8Array(analyser.frequencyBinCount);\n\n      // Define a function to render a frame\n      const renderFrame = () => {\n        // Request the next animation frame\n        requestAnimationFrame(renderFrame);\n\n        // Clear the canvas\n        canvasContext.clearRect(0, 0, width, height);\n\n        // Get the frequency data from the analyser\n        analyser.getByteFrequencyData(dataArray);\n        canvasContext.fillStyle = \"rgba(0, 0, 0, 0)\"; // background color\n        canvasContext.fillRect(0, 0, width, height);\n\n        // Calculate the width of each bar based on the canvas width and number of frequency bins\n        const barWidth = width / dataArray.length * 2.5;\n\n        // heightFactor is used to scale the height of the bars, if canvas is short, factor should be higher\n        const heightFactor = 1; // 1 means no scaling, 2 means double the height 0.5 means half height, etc.\n        let barHeight;\n        let x = 0;\n\n        // Loop through the frequency data and draw a bar for each frequency bin\n        for (let i = 0; i < dataArray.length; i++) {\n          barHeight = dataArray[i] / 127 * height * heightFactor;\n          canvasContext.fillStyle = `rgb(${barHeight + 100}, 0, 0)`; // create a fade out effect for red channel\n\n          canvasContext.fillRect(x, height - barHeight / 2, barWidth, barHeight);\n          x += barWidth + 1; // Move the position to the next bar\n        }\n      };\n\n      renderFrame();\n    }\n  }, [audioContext, analyser, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n};\n_s(MusicVisualizer, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = MusicVisualizer;\nexport default MusicVisualizer;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualizer\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","MusicVisualizer","_ref","_s","audioContext","analyser","width","height","canvasRef","canvas","current","canvasContext","getContext","dataArray","Uint8Array","frequencyBinCount","renderFrame","requestAnimationFrame","clearRect","getByteFrequencyData","fillStyle","fillRect","barWidth","length","heightFactor","barHeight","x","i","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/文件/GitHub/CSCI3280Project/client/src/AudioScript/MusicVisualizer.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\n\r\nconst MusicVisualizer = ({ audioContext, analyser, width, height }) => {\r\n\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Get the canvas element and its context\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n\r\n        if (analyser !== null ) {\r\n        // Create a new array to hold the frequency data\r\n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n        // Define a function to render a frame\r\n        const renderFrame = () => {\r\n            // Request the next animation frame\r\n            requestAnimationFrame(renderFrame);\r\n\r\n            // Clear the canvas\r\n            canvasContext.clearRect(0, 0, width, height);\r\n\r\n            // Get the frequency data from the analyser\r\n            analyser.getByteFrequencyData(dataArray);\r\n\r\n            canvasContext.fillStyle = \"rgba(0, 0, 0, 0)\"; // background color\r\n            canvasContext.fillRect(0, 0, width, height);\r\n\r\n            // Calculate the width of each bar based on the canvas width and number of frequency bins\r\n            const barWidth = (width / dataArray.length) * 2.5;\r\n            \r\n            // heightFactor is used to scale the height of the bars, if canvas is short, factor should be higher\r\n            const heightFactor = 1; // 1 means no scaling, 2 means double the height 0.5 means half height, etc.\r\n            let barHeight;\r\n            let x = 0;\r\n\r\n            // Loop through the frequency data and draw a bar for each frequency bin\r\n            for (let i = 0; i < dataArray.length; i++) {\r\n\r\n            barHeight = dataArray[i] / 127 * height * heightFactor;\r\n\r\n\r\n            canvasContext.fillStyle = `rgb(${barHeight + 100}, 0, 0)`; // create a fade out effect for red channel\r\n\r\n\r\n            canvasContext.fillRect(x, height - barHeight / 2, barWidth, barHeight);\r\n\r\n            x += barWidth + 1; // Move the position to the next bar\r\n            }\r\n        };\r\n        \r\n        renderFrame();\r\n        }\r\n\r\n    }, [audioContext, analyser, width, height]);\r\n\r\n    return <canvas ref={canvasRef} width={width} height={height} />;\r\n};\r\n\r\nexport default MusicVisualizer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,eAAe,GAAGC,IAAA,IAA+C;EAAAC,EAAA;EAAA,IAA9C;IAAEC,YAAY;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAAL,IAAA;EAE9D,MAAMM,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,aAAa,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAE7C,IAAIP,QAAQ,KAAK,IAAI,EAAG;MACxB;MACA,MAAMQ,SAAS,GAAG,IAAIC,UAAU,CAACT,QAAQ,CAACU,iBAAiB,CAAC;;MAE5D;MACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;QACtB;QACAC,qBAAqB,CAACD,WAAW,CAAC;;QAElC;QACAL,aAAa,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEZ,KAAK,EAAEC,MAAM,CAAC;;QAE5C;QACAF,QAAQ,CAACc,oBAAoB,CAACN,SAAS,CAAC;QAExCF,aAAa,CAACS,SAAS,GAAG,kBAAkB,CAAC,CAAC;QAC9CT,aAAa,CAACU,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEf,KAAK,EAAEC,MAAM,CAAC;;QAE3C;QACA,MAAMe,QAAQ,GAAIhB,KAAK,GAAGO,SAAS,CAACU,MAAM,GAAI,GAAG;;QAEjD;QACA,MAAMC,YAAY,GAAG,CAAC,CAAC,CAAC;QACxB,IAAIC,SAAS;QACb,IAAIC,CAAC,GAAG,CAAC;;QAET;QACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,SAAS,CAACU,MAAM,EAAEI,CAAC,EAAE,EAAE;UAE3CF,SAAS,GAAGZ,SAAS,CAACc,CAAC,CAAC,GAAG,GAAG,GAAGpB,MAAM,GAAGiB,YAAY;UAGtDb,aAAa,CAACS,SAAS,GAAI,OAAMK,SAAS,GAAG,GAAI,SAAQ,CAAC,CAAC;;UAG3Dd,aAAa,CAACU,QAAQ,CAACK,CAAC,EAAEnB,MAAM,GAAGkB,SAAS,GAAG,CAAC,EAAEH,QAAQ,EAAEG,SAAS,CAAC;UAEtEC,CAAC,IAAIJ,QAAQ,GAAG,CAAC,CAAC,CAAC;QACnB;MACJ,CAAC;;MAEDN,WAAW,EAAE;IACb;EAEJ,CAAC,EAAE,CAACZ,YAAY,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,CAAC,CAAC;EAE3C,oBAAOP,OAAA;IAAQ4B,GAAG,EAAEpB,SAAU;IAACF,KAAK,EAAEA,KAAM;IAACC,MAAM,EAAEA;EAAO;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACnE,CAAC;AAAC7B,EAAA,CAxDIF,eAAe;AAAAgC,EAAA,GAAfhC,eAAe;AA0DrB,eAAeA,eAAe;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}