{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u6587\\u4EF6\\\\GitHub\\\\CSCI3280Project\\\\client\\\\src\\\\AudioScript\\\\AudioPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { DecodeWav } from './WavDecoder';\nimport MusicVisualizer from './MusicVisualizer';\nimport LrcDisplayer from './LrcDisplayer';\nimport musicList from '../MusicDatabase/musicList';\nimport Client from './Client';\nimport \"../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AudioPlayer() {\n  _s();\n  const numberToTime = number => {\n    const minutes = Math.floor(number / 60);\n    const seconds = Math.floor(number % 60);\n    const minutesString = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    const secondsString = seconds < 10 ? `0${seconds}` : `${seconds}`;\n    return `${minutesString}:${secondsString}`;\n  };\n  const [fileName, setFileName] = useState(null);\n  // const [audioURL, setAudioURL] = useState(null);\n  const [audioBuffer, setAudioBuffer] = useState(null);\n  const [audioData, setAudioData] = useState(null); // wav audio data\n  const [audioSource, setAudioSource] = useState(null); // the audio\n  const [isPlayingMusic, setIsPlayingMusic] = useState(false); // is music paying\n  const [volumeLevel, setVolumeLevel] = useState(0.5); // music volume level\n  const [audioContext, setAudioContext] = useState(null); // holder of the audio and properties\n  const [analyser, setAnalyser] = useState(null); // for music visualizer\n  const [musicFormat, setMusicFormat] = useState(null); // music format: wav, mp3, null\n  const [currentTime, setCurrentTime] = useState(0); // for progress bar\n  const [duration, setDuration] = useState(0); // for progress bar\n  const [currentMusic, setCurrentMusic] = useState(null); // for database and lyric\n  const [playMode, setPlayMode] = useState('single'); // for play mode, single, loop, random\n  const [searchKeywords, setSearch] = useState('');\n  const handleSearchChange = event => {\n    setSearch(event.target.value);\n  };\n  const [title, setTitle] = useState('unknown'); // for title\n  const handleTitleChange = event => {\n    setTitle(event.target.value);\n  };\n  const [artist, setArtist] = useState('unknown'); // for artist\n  const handleArtistChange = event => {\n    setArtist(event.target.value);\n  };\n  const [album, setAlbum] = useState('unknown'); // for album\n  const handleAlbumChange = event => {\n    setAlbum(event.target.value);\n  };\n  const [coverFile, setCoverFile] = useState(null); // for cover\n  const handleCoverFileChange = event => {\n    const file = event.target.files[0];\n    const format = file.name.substr(file.name.length - 3);\n    if (format !== 'jpg' && format !== 'JPG' && format !== 'png' && format !== 'PNG') {\n      if (file.name.substr(file.name.length - 4) !== 'jpeg' && file.name.substr(file.name.length - 4) !== 'JPEG') {\n        alert('Please upload a jpg or png file');\n        return;\n      }\n    }\n    const fpath = URL.createObjectURL(file);\n    setCoverFile(fpath);\n  };\n  const [lyricsFile, setLyricsFile] = useState(null); // for lyrics\n  const handleLyricsFileChange = event => {\n    const file = event.target.files[0];\n    const format = file.name.substr(file.name.length - 3);\n    if (format !== 'txt' && format !== 'lrc') {\n      alert('Please upload a txt or lrc file');\n      return;\n    }\n    var fpath = URL.createObjectURL(file);\n    fpath = fpath.concat(\".\" + format);\n    setLyricsFile(fpath);\n  };\n  const [musicFile, setMusicFile] = useState(null); // for music file\n  const handleMusicFileChange = event => {\n    const file = event.target.files[0];\n    const format = file.name.substr(file.name.length - 3);\n    if (format !== 'wav' && format !== 'mp3' && format !== 'ogg' && 'aac') {\n      alert('Please upload a wav, mp3, ogg or aac file');\n      return;\n    }\n    const fpath = URL.createObjectURL(file);\n    setMusicFile(fpath);\n  };\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []); // force rerender\n\n  // Add music to database\n  const addMusic = useCallback(() => {\n    if (musicFile === null) {\n      alert(\"please upload a music\");\n      return;\n    }\n    if (title === null) {\n      setTitle('unknown');\n    }\n    if (artist === null) {\n      setArtist('unknown');\n    }\n    if (album === null) {\n      setAlbum('unknown');\n    }\n    if (coverFile === null) {\n      setCoverFile('');\n    }\n    if (lyricsFile === null) {\n      setLyricsFile('');\n    }\n    if (musicFile === null) {\n      setMusicFile('');\n    }\n    musicList.push({\n      \"audioPath\": musicFile,\n      \"audioTitle\": title,\n      \"artist\": artist,\n      \"album\": album,\n      \"coverPhotoPath\": coverFile,\n      \"lyricsPath\": lyricsFile\n    });\n    forceUpdate();\n    setTitle('unknown');\n    setArtist('unknown');\n    setAlbum('unknown');\n    setCoverFile(null);\n    setLyricsFile(null);\n    setMusicFile(null);\n  }, [forceUpdate, title, artist, album, coverFile, lyricsFile, musicFile]);\n\n  // delete music from database\n  const deleteMusic = useCallback(name => {\n    musicList.splice(musicList.findIndex(obj => obj.audioTitle === name), 1);\n    forceUpdate();\n  }, [forceUpdate]);\n\n  // Load music from database\n  const loadMusic = async audioTitle => {\n    // Find the object in the JSON data that contains the audioTitle\n    const audioObj = musicList.find(obj => obj.audioTitle === audioTitle);\n    if (!audioObj) {\n      alert(`Audio file not found for title: ${audioTitle}`);\n      return;\n    }\n\n    // Create a new File object from the audio path in the object\n    const file = new File([await fetch(audioObj.audioPath).then(response => response.blob())], audioObj.audioPath);\n    setCurrentMusic(audioObj);\n    handleStopClick();\n    setFileName(file.name);\n    const format = file.name.substr(file.name.length - 3);\n    setAudioData(null);\n    // setAudioURL(URL.createObjectURL(file));\n    const newAudioContext = new AudioContext();\n    switch (format.toLowerCase()) {\n      case 'wav':\n        setMusicFormat('wav');\n        const decodedData = await DecodeWav(file);\n        setAudioData(decodedData);\n        setAudioBuffer(newAudioContext.createBuffer(decodedData.numChannels, decodedData.audioData.length / decodedData.numChannels, decodedData.sampleRate));\n        setDuration(decodedData.duration);\n        break;\n      default:\n        setMusicFormat(format.toLowerCase());\n        const response = await fetch(URL.createObjectURL(file));\n        const arrayBuffer = await response.arrayBuffer();\n        const decodedAudioData = await newAudioContext.decodeAudioData(arrayBuffer);\n        setAudioData(decodedAudioData);\n        setAudioBuffer(decodedAudioData);\n        setDuration(decodedAudioData.duration);\n        break;\n    }\n    if (audioSource !== null) {\n      audioSource.stop();\n    }\n    newAudioContext.close();\n  };\n  const handleFileChange = async event => {\n    const file = event.target.files[0];\n    const format = file.name.substr(file.name.length - 3);\n    if (format !== 'wav' && format !== 'mp3' && format !== 'ogg' && 'aac') {\n      alert('Please upload a wav, mp3, ogg or aac file');\n      return;\n    }\n    var isMusicExist = false;\n    musicList.map(music => {\n      if (music.audioTitle === file.name.substr(0, file.name.length - 4)) {\n        isMusicExist = true;\n        alert('This music is already in the database');\n      }\n    });\n    const fpath = URL.createObjectURL(file);\n    setMusicFile(fpath);\n  };\n\n  // Play Music\n  const handlePlayClick = () => {\n    if (isPlayingMusic === true) return;\n    if (musicFormat === null) return;\n    console.log('play');\n    setIsPlayingMusic(true);\n    if (audioSource !== null && audioSource.context.state === 'suspended') {\n      // resume audio\n      audioSource.context.resume();\n    } else {\n      // play a new audio\n      setCurrentTime(0);\n      setOffset(0);\n      let newAudioContext;\n      if (audioContext === null) newAudioContext = new AudioContext();else newAudioContext = audioContext;\n\n      // set analyser\n      const analyser = newAudioContext.createAnalyser();\n      analyser.fftSize = 256;\n      analyser.connect(newAudioContext.destination);\n      setAnalyser(analyser);\n\n      // set volume\n      const gainNode = newAudioContext.createGain();\n      gainNode.gain.value = volumeLevel;\n      gainNode.connect(analyser);\n      if (musicFormat === 'wav') {\n        for (let channel = 0; channel < audioData.numChannels; channel++) {\n          const channelData = audioBuffer.getChannelData(channel);\n          for (let i = 0; i < audioData.audioData.length; i += audioData.numChannels) {\n            channelData[i / audioData.numChannels] = audioData.audioData[i + channel];\n          }\n        }\n      }\n      const sourceNode = newAudioContext.createBufferSource();\n      sourceNode.buffer = audioBuffer;\n      sourceNode.connect(gainNode);\n      sourceNode.start();\n      setAudioSource(sourceNode);\n      setAudioContext(newAudioContext);\n    }\n  };\n\n  // Pause Music\n  const handlePauseClick = () => {\n    setIsPlayingMusic(false);\n    if (audioSource !== null && audioSource.context.state === 'running') {\n      audioSource.context.suspend();\n    }\n  };\n\n  // Stop Music\n  const handleStopClick = () => {\n    setIsPlayingMusic(false);\n    if (audioSource !== null) {\n      audioSource.stop();\n      setAudioSource(null);\n    }\n    if (audioContext !== null) {\n      audioContext.close();\n      setAudioContext(null);\n    }\n    setOffset(0);\n    document.getElementById('progressBar').value = 0;\n    setCurrentTime(0);\n  };\n\n  // Volume Control\n  const handleVolumeChange = event => {\n    setVolumeLevel(parseFloat(event.target.value));\n    if (audioSource !== null) {\n      const gainNode = audioContext.createGain();\n      // console.log('volumeLevel: ', volumeLevel);\n      gainNode.gain.value = volumeLevel;\n      gainNode.connect(analyser);\n      audioSource.disconnect();\n      audioSource.connect(gainNode);\n    }\n  };\n\n  // Progress Bar\n  const [offset, setOffset] = useState(0);\n  const setProgressBar = () => {\n    if (audioSource === null) return;\n    const progressBar = document.getElementById('progressBar');\n    let targetTime = progressBar.value;\n    setOffset(targetTime);\n    if (audioSource !== null) {\n      audioSource.stop();\n      setAudioSource(null);\n    }\n    let newAudioContext;\n    if (audioContext !== null) {\n      audioContext.close();\n      setAudioContext(null);\n      newAudioContext = new AudioContext();\n    } else newAudioContext = audioContext;\n\n    // set analyser\n    const analyser = newAudioContext.createAnalyser();\n    analyser.fftSize = 256;\n    analyser.connect(newAudioContext.destination);\n    setAnalyser(analyser);\n\n    // set volume\n    const gainNode = newAudioContext.createGain();\n    gainNode.gain.value = volumeLevel;\n    gainNode.connect(analyser);\n    if (musicFormat === 'wav') for (let channel = 0; channel < audioData.numChannels; channel++) {\n      const channelData = audioBuffer.getChannelData(channel);\n      for (let i = 0; i < audioData.audioData.length; i += audioData.numChannels) {\n        channelData[i / audioData.numChannels] = audioData.audioData[i + channel];\n      }\n    }\n    const sourceNode = newAudioContext.createBufferSource();\n    sourceNode.buffer = audioBuffer;\n    sourceNode.connect(gainNode);\n    sourceNode.start(0, targetTime);\n    setAudioSource(sourceNode);\n    setAudioContext(newAudioContext);\n    if (!isPlayingMusic) {\n      sourceNode.context.suspend();\n    }\n    updateProgressBar();\n  };\n  const updateProgressBar = useCallback(() => {\n    const progressBar = document.getElementById('progressBar');\n    let duration = audioData ? audioData.duration : 0;\n    let time = audioContext.currentTime - audioSource.context.baseLatency + parseFloat(offset);\n    if (time > duration) {\n      time = duration;\n    }\n    progressBar.value = time;\n    setCurrentTime(time);\n  }, [audioContext, audioData, audioSource, offset]);\n  useEffect(() => {\n    if (isPlayingMusic) {\n      const interval = setInterval(updateProgressBar, 10);\n      return () => clearInterval(interval);\n    }\n  }, [isPlayingMusic, updateProgressBar]);\n\n  // Load and Play\n  const loadAndPlayMusic = async audioTitle => {\n    // Find the object in the JSON data that contains the audioTitle\n    const audioObj = musicList.find(obj => obj.audioTitle === audioTitle);\n    if (!audioObj) {\n      alert(`Audio file not found for title: ${audioTitle}`);\n      return;\n    }\n\n    // Create a new File object from the audio path in the object\n    const file = new File([await fetch(audioObj.audioPath).then(response => response.blob())], audioObj.audioPath);\n    setCurrentMusic(audioObj);\n    if (audioSource !== null) {\n      audioSource.stop();\n      setAudioSource(null);\n    }\n    if (audioContext !== null) {\n      audioContext.close();\n      setAudioContext(null);\n    }\n    setOffset(0);\n    document.getElementById('progressBar').value = 0;\n    setCurrentTime(0);\n    setFileName(file.name);\n    const format = file.name.substr(file.name.length - 3);\n    let decodedAudioData;\n    let decodedAudioBuffer;\n    setAudioData(null);\n    // setAudioURL(URL.createObjectURL(file));\n    const new2AudioContext = new AudioContext();\n    switch (format.toLowerCase()) {\n      case 'wav':\n        setMusicFormat('wav');\n        decodedAudioData = await DecodeWav(file);\n        setAudioData(decodedAudioData);\n        decodedAudioBuffer = new2AudioContext.createBuffer(decodedAudioData.numChannels, decodedAudioData.audioData.length / decodedAudioData.numChannels, decodedAudioData.sampleRate);\n        setAudioBuffer(decodedAudioBuffer);\n        setDuration(decodedAudioData.duration);\n        break;\n      default:\n        setMusicFormat(format.toLowerCase());\n        const response = await fetch(URL.createObjectURL(file));\n        const arrayBuffer = await response.arrayBuffer();\n        decodedAudioData = await new2AudioContext.decodeAudioData(arrayBuffer);\n        setAudioData(decodedAudioData);\n        decodedAudioBuffer = decodedAudioData;\n        setAudioBuffer(decodedAudioBuffer);\n        setDuration(decodedAudioData.duration);\n        break;\n    }\n    if (audioSource !== null) {\n      audioSource.stop();\n    }\n    new2AudioContext.close();\n    setIsPlayingMusic(true);\n\n    // play a new audio\n    setCurrentTime(0);\n    setOffset(0);\n    let new3AudioContext;\n    if (audioContext === null || audioContext.state === \"closed\") new3AudioContext = new AudioContext();else new3AudioContext = audioContext;\n\n    // set analyser\n    const analyser = new3AudioContext.createAnalyser();\n    analyser.fftSize = 256;\n    analyser.connect(new3AudioContext.destination);\n    setAnalyser(analyser);\n\n    // set volume\n    const gainNode = new3AudioContext.createGain();\n    gainNode.gain.value = volumeLevel;\n    gainNode.connect(analyser);\n    if (musicFormat === 'wav') {\n      for (let channel = 0; channel < decodedAudioData.numChannels; channel++) {\n        const channelData = decodedAudioBuffer.getChannelData(channel);\n        for (let i = 0; i < decodedAudioData.decodedAudioData.length; i += decodedAudioData.numChannels) {\n          channelData[i / decodedAudioData.numChannels] = decodedAudioData.decodedAudioData[i + channel];\n        }\n      }\n    }\n    const sourceNode = new3AudioContext.createBufferSource();\n    sourceNode.buffer = decodedAudioBuffer;\n    sourceNode.connect(gainNode);\n    sourceNode.start();\n    setAudioSource(sourceNode);\n    setAudioContext(new3AudioContext);\n  };\n\n  // handle PlayMode\n  useEffect(() => {\n    if (audioContext === null) return;\n    const handleEnd = () => {\n      setIsPlayingMusic(false);\n      setCurrentTime(0);\n      switch (playMode) {\n        case 'single':\n          audioSource.stop();\n          break;\n        case 'loop':\n          loadAndPlayMusic(currentMusic.audioTitle);\n          break;\n        case 'random':\n          const randomIndex = Math.floor(Math.random() * musicList.length);\n          const randomMusic = musicList[randomIndex];\n          loadAndPlayMusic(randomMusic.audioTitle);\n          break;\n        default:\n          break;\n      }\n    };\n    audioSource.addEventListener('ended', handleEnd);\n    return () => audioSource.removeEventListener('ended', handleEnd);\n  }, [audioContext, audioData, audioSource, currentMusic, musicFormat, playMode, volumeLevel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"audioPlayer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \" col-lg-7 col-md-12 p-1 p-lg-5\",\n          id: \"topLeft\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-column align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(MusicVisualizer, {\n              class: \"mx-auto d-block\",\n              audioContext: audioContext,\n              analyser: analyser,\n              width: 450,\n              height: 50\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 29\n            }, this), currentMusic !== null && currentMusic.coverPhotoPath !== '' && currentMusic.coverPhotoPath !== undefined && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: currentMusic.coverPhotoPath,\n              alt: \"coverPhoto\",\n              style: {\n                width: \"450px\",\n                height: \"450px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"col-lg-5 col-md-12 p-1 p-lg-5\",\n          id: \"topRight\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-column align-items-center\",\n            children: currentMusic !== null && /*#__PURE__*/_jsxDEV(LrcDisplayer, {\n              music: currentMusic,\n              currentTime: currentTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row flex-grow-1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          id: \"upperBottom\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Keywords\",\n            style: {\n              color: \"black\",\n              width: \"200px\"\n            },\n            onChange: handleSearchChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              minHeight: '200px',\n              maxHeight: '400px',\n              maxWidth: '1000px',\n              overflow: 'auto'\n            },\n            children: musicList.map(music => {\n              if (music.audioTitle.toLowerCase().includes(searchKeywords.toLowerCase(), 0) || music.artist.toLowerCase().includes(searchKeywords.toLowerCase(), 0) || music.album.toLowerCase().includes(searchKeywords.toLowerCase(), 0)) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: \"grid\",\n                    gridTemplateColumns: \"repeat(3, 1fr)\",\n                    gridGap: 20,\n                    color: \"white\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      style: {\n                        background: \"lightgreen\"\n                      },\n                      onClick: () => {\n                        loadAndPlayMusic(music.audioTitle);\n                      },\n                      children: \"play\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 498,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      style: {\n                        background: \"pink\"\n                      },\n                      onClick: () => {\n                        deleteMusic(music.audioTitle);\n                      },\n                      children: \"delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 499,\n                      columnNumber: 49\n                    }, this), music.audioTitle]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 497,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: music.artist\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 502,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: music.album\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 503,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 496,\n                  columnNumber: 41\n                }, this);\n              }\n              return null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"selectMusic\",\n            style: {\n              marginTop: \"20px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Add music from your computer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Title\",\n              style: {\n                color: \"black\",\n                width: \"200px\"\n              },\n              onChange: handleTitleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Artist\",\n              style: {\n                color: \"black\",\n                width: \"200px\"\n              },\n              onChange: handleArtistChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Album\",\n              style: {\n                color: \"black\",\n                width: \"200px\"\n              },\n              onChange: handleAlbumChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                margin: \"5px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    margin: \"4px\"\n                  },\n                  children: \"Cover\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 520,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"coverFile\",\n                  type: \"file\",\n                  style: {\n                    color: \"grey\"\n                  },\n                  onChange: handleCoverFileChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 522,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    margin: \"4px\"\n                  },\n                  children: \"Lyrics\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 525,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"lyricsFile\",\n                  type: \"file\",\n                  style: {\n                    color: \"grey\"\n                  },\n                  onChange: handleLyricsFileChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    margin: \"4px\"\n                  },\n                  children: \"Music\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 530,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"musicFile\",\n                  type: \"file\",\n                  style: {\n                    color: \"grey\"\n                  },\n                  onChange: handleMusicFileChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 532,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                background: \"lightblue\"\n              },\n              onClick: addMusic,\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          marginTop: \"20px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          id: \"bottom\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: {\n              color: 'white'\n            },\n            children: currentMusic === null ? fileName : currentMusic.audioTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Artist: \", currentMusic === null ? \"unknown\" : currentMusic.artist]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Album: \", currentMusic === null ? \"unknown\" : currentMusic.album]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePlayClick,\n            disabled: isPlayingMusic || !audioData,\n            children: \"Play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePauseClick,\n            disabled: !isPlayingMusic || !audioSource,\n            children: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStopClick,\n            disabled: !audioSource,\n            children: \"Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"1\",\n            step: \"0.01\",\n            value: volumeLevel,\n            onChange: handleVolumeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"single\",\n            onClick: () => {\n              setPlayMode('single');\n            },\n            disabled: playMode === 'single',\n            children: \"Single\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"loop\",\n            onClick: () => {\n              setPlayMode('loop');\n            },\n            disabled: playMode === 'loop',\n            children: \"Loop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"random\",\n            onClick: () => {\n              setPlayMode('random');\n            },\n            disabled: playMode === 'random',\n            children: \"Random\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              id: \"progressBar\",\n              min: \"0\",\n              max: audioData ? audioData.duration : 0,\n              step: \"0.01\",\n              style: {\n                width: \"300px\",\n                height: \"40px\"\n              },\n              onChange: setProgressBar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: \"white\"\n              },\n              children: [numberToTime(currentTime), \" / \", numberToTime(duration)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: \"250px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Client, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 462,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioPlayer, \"b3AqhtuqfZTrVO0iPnyXmltqENw=\");\n_c = AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","DecodeWav","MusicVisualizer","LrcDisplayer","musicList","Client","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioPlayer","_s","numberToTime","number","minutes","Math","floor","seconds","minutesString","secondsString","fileName","setFileName","audioBuffer","setAudioBuffer","audioData","setAudioData","audioSource","setAudioSource","isPlayingMusic","setIsPlayingMusic","volumeLevel","setVolumeLevel","audioContext","setAudioContext","analyser","setAnalyser","musicFormat","setMusicFormat","currentTime","setCurrentTime","duration","setDuration","currentMusic","setCurrentMusic","playMode","setPlayMode","searchKeywords","setSearch","handleSearchChange","event","target","value","title","setTitle","handleTitleChange","artist","setArtist","handleArtistChange","album","setAlbum","handleAlbumChange","coverFile","setCoverFile","handleCoverFileChange","file","files","format","name","substr","length","alert","fpath","URL","createObjectURL","lyricsFile","setLyricsFile","handleLyricsFileChange","concat","musicFile","setMusicFile","handleMusicFileChange","updateState","forceUpdate","addMusic","push","deleteMusic","splice","findIndex","obj","audioTitle","loadMusic","audioObj","find","File","fetch","audioPath","then","response","blob","handleStopClick","newAudioContext","AudioContext","toLowerCase","decodedData","createBuffer","numChannels","sampleRate","arrayBuffer","decodedAudioData","decodeAudioData","stop","close","handleFileChange","isMusicExist","map","music","handlePlayClick","console","log","context","state","resume","setOffset","createAnalyser","fftSize","connect","destination","gainNode","createGain","gain","channel","channelData","getChannelData","i","sourceNode","createBufferSource","buffer","start","handlePauseClick","suspend","document","getElementById","handleVolumeChange","parseFloat","disconnect","offset","setProgressBar","progressBar","targetTime","updateProgressBar","time","baseLatency","interval","setInterval","clearInterval","loadAndPlayMusic","decodedAudioBuffer","new2AudioContext","new3AudioContext","handleEnd","randomIndex","random","randomMusic","addEventListener","removeEventListener","id","children","className","class","width","height","_jsxFileName","lineNumber","columnNumber","coverPhotoPath","undefined","src","alt","style","type","placeholder","color","onChange","minHeight","maxHeight","maxWidth","overflow","includes","display","gridTemplateColumns","gridGap","background","onClick","marginTop","flexDirection","justifyContent","margin","disabled","min","max","step","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/文件/GitHub/CSCI3280Project/client/src/AudioScript/AudioPlayer.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { DecodeWav } from './WavDecoder';\r\nimport MusicVisualizer from './MusicVisualizer';\r\nimport LrcDisplayer from './LrcDisplayer';\r\nimport musicList from '../MusicDatabase/musicList';\r\nimport Client from './Client';\r\nimport \"../index.css\"\r\n\r\nexport default function AudioPlayer() {\r\n\r\n    const numberToTime = (number) => {\r\n        const minutes = Math.floor(number / 60);\r\n        const seconds = Math.floor(number % 60);\r\n        const minutesString = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n        const secondsString = seconds < 10 ? `0${seconds}` : `${seconds}`;\r\n        return `${minutesString}:${secondsString}`;\r\n    };\r\n    const [fileName, setFileName] = useState(null);\r\n    // const [audioURL, setAudioURL] = useState(null);\r\n    const [audioBuffer, setAudioBuffer] = useState(null);\r\n    const [audioData, setAudioData] = useState(null); // wav audio data\r\n    const [audioSource, setAudioSource] = useState(null); // the audio\r\n    const [isPlayingMusic, setIsPlayingMusic] = useState(false); // is music paying\r\n    const [volumeLevel, setVolumeLevel] = useState(0.5); // music volume level\r\n    const [audioContext, setAudioContext] = useState(null); // holder of the audio and properties\r\n    const [analyser, setAnalyser] = useState(null); // for music visualizer\r\n    const [musicFormat, setMusicFormat] = useState(null); // music format: wav, mp3, null\r\n    const [currentTime, setCurrentTime] = useState(0); // for progress bar\r\n    const [duration, setDuration] = useState(0); // for progress bar\r\n    const [currentMusic, setCurrentMusic] = useState(null); // for database and lyric\r\n    const [playMode, setPlayMode] = useState('single'); // for play mode, single, loop, random\r\n    const [searchKeywords, setSearch] = useState('');\r\n    const handleSearchChange = (event) => {setSearch(event.target.value);};\r\n    const [title, setTitle] = useState('unknown'); // for title\r\n    const handleTitleChange = (event) => {setTitle(event.target.value);};\r\n    const [artist, setArtist] = useState('unknown'); // for artist\r\n    const handleArtistChange = (event) => {setArtist(event.target.value);};\r\n    const [album, setAlbum] = useState('unknown'); // for album\r\n    const handleAlbumChange = (event) => {setAlbum(event.target.value);};\r\n    const [coverFile, setCoverFile] = useState(null); // for cover\r\n    const handleCoverFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        const format = file.name.substr(file.name.length - 3);\r\n        if (format !== 'jpg' && format !== 'JPG' && format !== 'png' && format !== 'PNG') {\r\n            if (file.name.substr(file.name.length - 4) !== 'jpeg' && file.name.substr(file.name.length - 4) !== 'JPEG') {\r\n                alert('Please upload a jpg or png file');\r\n                return;\r\n            }\r\n        }\r\n        const fpath = URL.createObjectURL(file);\r\n        setCoverFile(fpath);\r\n    };\r\n    const [lyricsFile, setLyricsFile] = useState(null); // for lyrics\r\n    const handleLyricsFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        const format = file.name.substr(file.name.length - 3);\r\n        if (format !== 'txt' && format !== 'lrc') {\r\n            alert('Please upload a txt or lrc file');\r\n            return;\r\n        }\r\n        var fpath = URL.createObjectURL(file);\r\n\r\n        fpath = fpath.concat(\".\"+format);\r\n\r\n        setLyricsFile(fpath);\r\n    };\r\n    const [musicFile, setMusicFile] = useState(null); // for music file\r\n    const handleMusicFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        const format = file.name.substr(file.name.length - 3);\r\n        if (format !== 'wav' && format !== 'mp3' && format !== 'ogg' && 'aac') {\r\n            alert('Please upload a wav, mp3, ogg or aac file');\r\n            return;\r\n        }\r\n        const fpath = URL.createObjectURL(file);\r\n        setMusicFile(fpath);\r\n    };\r\n\r\n    const [, updateState] = React.useState();\r\n    const forceUpdate = React.useCallback(() => updateState({}), []); // force rerender\r\n\r\n    // Add music to database\r\n    const addMusic = useCallback (() => {\r\n\r\n        if (musicFile === null) { alert (\"please upload a music\"); return; }\r\n\r\n        if (title === null) { setTitle('unknown'); }\r\n        if (artist === null) { setArtist('unknown'); }\r\n        if (album === null) { setAlbum('unknown'); }\r\n        if (coverFile === null) { setCoverFile(''); }\r\n        if (lyricsFile === null) { setLyricsFile(''); }\r\n        if (musicFile === null) { setMusicFile(''); }\r\n    \r\n        musicList.push(\r\n            {\r\n                \"audioPath\": musicFile,\r\n                \"audioTitle\": title,\r\n                \"artist\": artist,\r\n                \"album\": album,\r\n                \"coverPhotoPath\": coverFile,\r\n                \"lyricsPath\": lyricsFile\r\n            }\r\n        );\r\n\r\n        forceUpdate();\r\n\r\n        setTitle('unknown');\r\n        setArtist('unknown');\r\n        setAlbum('unknown');\r\n        setCoverFile(null);\r\n        setLyricsFile(null);\r\n        setMusicFile(null);\r\n    },[forceUpdate, title, artist, album, coverFile, lyricsFile, musicFile]);\r\n\r\n    // delete music from database\r\n    const deleteMusic = useCallback ((name) => {\r\n        musicList.splice(musicList.findIndex(obj => obj.audioTitle === name), 1);\r\n        forceUpdate();\r\n    },[forceUpdate]);\r\n\r\n\r\n    // Load music from database\r\n    const loadMusic = async (audioTitle) => {\r\n        // Find the object in the JSON data that contains the audioTitle\r\n        const audioObj = musicList.find(obj => obj.audioTitle === audioTitle);\r\n        if (!audioObj) {\r\n            alert(`Audio file not found for title: ${audioTitle}`);\r\n            return;\r\n        }\r\n\r\n        // Create a new File object from the audio path in the object\r\n        const file = new File([await fetch(audioObj.audioPath).then(response => response.blob())], audioObj.audioPath);\r\n        setCurrentMusic(audioObj);\r\n        handleStopClick();\r\n        setFileName(file.name);\r\n        const format = file.name.substr(file.name.length - 3);\r\n        setAudioData(null);\r\n        // setAudioURL(URL.createObjectURL(file));\r\n        const newAudioContext = new AudioContext();\r\n        switch (format.toLowerCase()) {\r\n            case 'wav':\r\n                setMusicFormat('wav');\r\n                const decodedData = await DecodeWav(file);\r\n                setAudioData(decodedData);\r\n                setAudioBuffer(newAudioContext.createBuffer(decodedData.numChannels, decodedData.audioData.length / decodedData.numChannels, decodedData.sampleRate))\r\n                setDuration(decodedData.duration);\r\n                break;\r\n            default:\r\n                setMusicFormat(format.toLowerCase());\r\n                const response = await fetch(URL.createObjectURL(file));\r\n                const arrayBuffer = await response.arrayBuffer();\r\n                const decodedAudioData = await newAudioContext.decodeAudioData(arrayBuffer);\r\n                setAudioData(decodedAudioData);\r\n                setAudioBuffer(decodedAudioData);\r\n                setDuration(decodedAudioData.duration);\r\n                break;\r\n        }\r\n        if (audioSource !== null) {\r\n            audioSource.stop();\r\n        }\r\n        newAudioContext.close();\r\n    };\r\n\r\n    const handleFileChange = async (event) => {\r\n        const file = event.target.files[0];\r\n        const format = file.name.substr(file.name.length - 3);\r\n        if (format !== 'wav' && format !== 'mp3' && format !== 'ogg' && 'aac') {\r\n            alert('Please upload a wav, mp3, ogg or aac file');\r\n            return;\r\n        }\r\n        var isMusicExist = false;\r\n        musicList.map((music) => {\r\n            if (music.audioTitle === file.name.substr(0, file.name.length-4)) {\r\n                isMusicExist = true;\r\n                alert('This music is already in the database');\r\n            }\r\n        })\r\n        const fpath = URL.createObjectURL(file);\r\n        setMusicFile(fpath);\r\n    };\r\n\r\n    // Play Music\r\n    const handlePlayClick = () => {\r\n        if (isPlayingMusic === true) return;\r\n        if (musicFormat === null) return;\r\n\r\n        console.log('play');\r\n        setIsPlayingMusic(true);\r\n        if (audioSource !== null && audioSource.context.state === 'suspended') {\r\n            // resume audio\r\n            audioSource.context.resume();\r\n        }\r\n        else {\r\n            // play a new audio\r\n            setCurrentTime(0);\r\n            setOffset(0);\r\n            let newAudioContext;\r\n            if (audioContext === null) newAudioContext = new AudioContext();\r\n            else newAudioContext = audioContext;\r\n\r\n            // set analyser\r\n            const analyser = newAudioContext.createAnalyser();\r\n            analyser.fftSize = 256;\r\n            analyser.connect(newAudioContext.destination);\r\n            setAnalyser(analyser);\r\n\r\n            // set volume\r\n            const gainNode = newAudioContext.createGain();\r\n            gainNode.gain.value = volumeLevel;\r\n            gainNode.connect(analyser);\r\n\r\n            if (musicFormat === 'wav') {\r\n                for (let channel = 0; channel < audioData.numChannels; channel++) {\r\n                    const channelData = audioBuffer.getChannelData(channel);\r\n                    for (let i = 0; i < audioData.audioData.length; i += audioData.numChannels) {\r\n                        channelData[i / audioData.numChannels] = audioData.audioData[i + channel];\r\n                    }\r\n                }\r\n            }\r\n            const sourceNode = newAudioContext.createBufferSource();\r\n            sourceNode.buffer = audioBuffer;\r\n            sourceNode.connect(gainNode);\r\n            sourceNode.start();\r\n            setAudioSource(sourceNode);\r\n            setAudioContext(newAudioContext);\r\n        }\r\n    };\r\n\r\n\r\n    // Pause Music\r\n    const handlePauseClick = () => {\r\n        setIsPlayingMusic(false);\r\n        if (audioSource !== null && audioSource.context.state === 'running') {\r\n            audioSource.context.suspend();\r\n        }\r\n    };\r\n\r\n\r\n    // Stop Music\r\n    const handleStopClick = () => {\r\n        setIsPlayingMusic(false);\r\n        if (audioSource !== null) {\r\n            audioSource.stop();\r\n            setAudioSource(null);\r\n        }\r\n        if (audioContext !== null) {\r\n            audioContext.close();\r\n            setAudioContext(null);\r\n        }\r\n        setOffset(0);\r\n        document.getElementById('progressBar').value = 0;\r\n        setCurrentTime(0);\r\n    };\r\n\r\n\r\n    // Volume Control\r\n    const handleVolumeChange = (event) => {\r\n        setVolumeLevel(parseFloat(event.target.value));\r\n        if (audioSource !== null) {\r\n            const gainNode = audioContext.createGain();\r\n            // console.log('volumeLevel: ', volumeLevel);\r\n            gainNode.gain.value = volumeLevel;\r\n            gainNode.connect(analyser);\r\n            audioSource.disconnect();\r\n            audioSource.connect(gainNode);\r\n        }\r\n    };\r\n\r\n    // Progress Bar\r\n    const [offset, setOffset] = useState(0);\r\n    const setProgressBar = () => {\r\n        if (audioSource === null) return;\r\n        const progressBar = document.getElementById('progressBar');\r\n        let targetTime = progressBar.value;\r\n        setOffset(targetTime);\r\n\r\n        if (audioSource !== null) {\r\n            audioSource.stop();\r\n            setAudioSource(null);\r\n        }\r\n\r\n        let newAudioContext;\r\n        if (audioContext !== null) {\r\n            audioContext.close();\r\n            setAudioContext(null);\r\n            newAudioContext = new AudioContext();\r\n        }\r\n        else newAudioContext = audioContext;\r\n\r\n        // set analyser\r\n        const analyser = newAudioContext.createAnalyser();\r\n        analyser.fftSize = 256;\r\n        analyser.connect(newAudioContext.destination);\r\n        setAnalyser(analyser);\r\n\r\n        // set volume\r\n        const gainNode = newAudioContext.createGain();\r\n        gainNode.gain.value = volumeLevel;\r\n        gainNode.connect(analyser);\r\n\r\n        if (musicFormat === 'wav')\r\n            for (let channel = 0; channel < audioData.numChannels; channel++) {\r\n                const channelData = audioBuffer.getChannelData(channel);\r\n                for (let i = 0; i < audioData.audioData.length; i += audioData.numChannels) {\r\n                    channelData[i / audioData.numChannels] = audioData.audioData[i + channel];\r\n                }\r\n            }\r\n        const sourceNode = newAudioContext.createBufferSource();\r\n        sourceNode.buffer = audioBuffer;\r\n        sourceNode.connect(gainNode);\r\n        sourceNode.start(0, targetTime);\r\n        setAudioSource(sourceNode);\r\n        setAudioContext(newAudioContext);\r\n\r\n        if (!isPlayingMusic) {\r\n            sourceNode.context.suspend();\r\n        }\r\n        updateProgressBar();\r\n    }\r\n\r\n    const updateProgressBar = useCallback(() => {\r\n        const progressBar = document.getElementById('progressBar');\r\n        let duration = audioData ? audioData.duration : 0;\r\n        let time = audioContext.currentTime - audioSource.context.baseLatency + parseFloat(offset);\r\n        if (time > duration) {\r\n            time = duration;\r\n        }\r\n        progressBar.value = time;\r\n        setCurrentTime(time);\r\n    }, [audioContext, audioData, audioSource, offset]);\r\n\r\n    useEffect(() => {\r\n        if (isPlayingMusic) {\r\n            const interval = setInterval(updateProgressBar, 10);\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [isPlayingMusic, updateProgressBar]);\r\n\r\n    // Load and Play\r\n    const loadAndPlayMusic = async (audioTitle) => {\r\n\r\n        // Find the object in the JSON data that contains the audioTitle\r\n        const audioObj = musicList.find(obj => obj.audioTitle === audioTitle);\r\n        if (!audioObj) {\r\n            alert(`Audio file not found for title: ${audioTitle}`);\r\n            return;\r\n        }\r\n\r\n        // Create a new File object from the audio path in the object\r\n        const file = new File([await fetch(audioObj.audioPath).then(response => response.blob())], audioObj.audioPath);\r\n        setCurrentMusic(audioObj);\r\n        if (audioSource !== null) {\r\n            audioSource.stop();\r\n            setAudioSource(null);\r\n        }\r\n        if (audioContext !== null) {\r\n            audioContext.close();\r\n            setAudioContext(null);\r\n        }\r\n        setOffset(0);\r\n        document.getElementById('progressBar').value = 0;\r\n        setCurrentTime(0);\r\n        setFileName(file.name);\r\n        const format = file.name.substr(file.name.length - 3);\r\n        let decodedAudioData;\r\n        let decodedAudioBuffer;\r\n        setAudioData(null);\r\n        // setAudioURL(URL.createObjectURL(file));\r\n        const new2AudioContext = new AudioContext();\r\n        switch (format.toLowerCase()) {\r\n            case 'wav':\r\n                setMusicFormat('wav');\r\n                decodedAudioData = await DecodeWav(file);\r\n                setAudioData(decodedAudioData);\r\n                decodedAudioBuffer = (new2AudioContext.createBuffer(decodedAudioData.numChannels, decodedAudioData.audioData.length / decodedAudioData.numChannels, decodedAudioData.sampleRate))\r\n                setAudioBuffer(decodedAudioBuffer);\r\n                setDuration(decodedAudioData.duration);\r\n                break;\r\n            default:\r\n                setMusicFormat(format.toLowerCase());\r\n                const response = await fetch(URL.createObjectURL(file));\r\n                const arrayBuffer = await response.arrayBuffer();\r\n                decodedAudioData = await new2AudioContext.decodeAudioData(arrayBuffer);\r\n                setAudioData(decodedAudioData);\r\n                decodedAudioBuffer = (decodedAudioData);\r\n                setAudioBuffer(decodedAudioBuffer);\r\n                setDuration(decodedAudioData.duration);\r\n                break;\r\n        }\r\n        if (audioSource !== null) {\r\n            audioSource.stop();\r\n        }\r\n        new2AudioContext.close();\r\n\r\n        setIsPlayingMusic(true);\r\n\r\n        // play a new audio\r\n        setCurrentTime(0);\r\n        setOffset(0);\r\n        let new3AudioContext;\r\n        if (audioContext === null || audioContext.state === \"closed\") new3AudioContext = new AudioContext();\r\n        else new3AudioContext = audioContext;\r\n\r\n        // set analyser\r\n        const analyser = new3AudioContext.createAnalyser();\r\n        analyser.fftSize = 256;\r\n        analyser.connect(new3AudioContext.destination);\r\n        setAnalyser(analyser);\r\n\r\n        // set volume\r\n        const gainNode = new3AudioContext.createGain();\r\n        gainNode.gain.value = volumeLevel;\r\n        gainNode.connect(analyser);\r\n\r\n        if (musicFormat === 'wav') {\r\n            for (let channel = 0; channel < decodedAudioData.numChannels; channel++) {\r\n                const channelData = decodedAudioBuffer.getChannelData(channel);\r\n                for (let i = 0; i < decodedAudioData.decodedAudioData.length; i += decodedAudioData.numChannels) {\r\n                    channelData[i / decodedAudioData.numChannels] = decodedAudioData.decodedAudioData[i + channel];\r\n                }\r\n            }\r\n        }\r\n        const sourceNode = new3AudioContext.createBufferSource();\r\n        sourceNode.buffer = decodedAudioBuffer;\r\n        sourceNode.connect(gainNode);\r\n        sourceNode.start();\r\n        setAudioSource(sourceNode);\r\n        setAudioContext(new3AudioContext);\r\n    };\r\n\r\n    // handle PlayMode\r\n    useEffect(() => {\r\n        if (audioContext === null) return;\r\n        const handleEnd = () => {\r\n            setIsPlayingMusic(false);\r\n            setCurrentTime(0);\r\n\r\n            switch (playMode) {\r\n                case 'single':\r\n                    audioSource.stop();\r\n                    break;\r\n                case 'loop':\r\n                    loadAndPlayMusic(currentMusic.audioTitle);\r\n                    break;\r\n                case 'random':\r\n                    const randomIndex = Math.floor(Math.random() * musicList.length);\r\n                    const randomMusic = musicList[randomIndex];\r\n                    loadAndPlayMusic(randomMusic.audioTitle);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n\r\n        audioSource.addEventListener('ended', handleEnd);\r\n        return () => audioSource.removeEventListener('ended', handleEnd);\r\n    }, [audioContext, audioData, audioSource, currentMusic, musicFormat, playMode, volumeLevel]);\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"audioPlayer\">\r\n            <div className=\"container\">\r\n                <div className=\"row align-items-center\">\r\n                    {/* Top left block: Cover photo and visualizer. */}\r\n                    <section className=\" col-lg-7 col-md-12 p-1 p-lg-5\" id='topLeft'>\r\n                        <div className=\"d-flex flex-column align-items-center\">\r\n                            <MusicVisualizer class=\"mx-auto d-block\" audioContext={audioContext} analyser={analyser} width={450} height={50} />\r\n\r\n                            {currentMusic !== null && currentMusic.coverPhotoPath !== '' && currentMusic.coverPhotoPath !== undefined &&\r\n                                <img src={currentMusic.coverPhotoPath} alt=\"coverPhoto\" style={{ width: \"450px\", height: \"450px\" }}></img>\r\n                            }\r\n                        </div>\r\n                    </section>\r\n\r\n\r\n                    {/* Top right block: Lyrics. */}\r\n                    <section className=\"col-lg-5 col-md-12 p-1 p-lg-5\" id='topRight'>\r\n                        <div className=\"d-flex flex-column align-items-center\">\r\n                            {currentMusic !== null && <LrcDisplayer music={currentMusic} currentTime={currentTime} />}\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n\r\n                <div className=\"row flex-grow-1\">\r\n                    {/* Upper bottom: Song list and uploding. */}\r\n                    <div className=\"col-md-12\" id='upperBottom'>\r\n                            <h3> \r\n                                Search\r\n                            </h3>\r\n                            <input type=\"text\" placeholder=\"Keywords\" style={{color:\"black\", width: \"200px\"}} onChange={handleSearchChange} />\r\n                        <div style={{ minHeight: '200px', maxHeight: '400px', maxWidth: '1000px', overflow: 'auto' }}>\r\n                            {musicList.map((music) => {\r\n                                if (music.audioTitle.toLowerCase().includes(searchKeywords.toLowerCase(), 0) || music.artist.toLowerCase().includes(searchKeywords.toLowerCase(), 0) || music.album.toLowerCase().includes(searchKeywords.toLowerCase(), 0)) {\r\n                                    return (\r\n                                        <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(3, 1fr)\", gridGap: 20, color: \"white\" }}>\r\n                                            <div>\r\n                                                <button style={{background: \"lightgreen\"}} onClick={() => { loadAndPlayMusic(music.audioTitle) }}>play</button>\r\n                                                <button style={{background: \"pink\"}} onClick={() => { deleteMusic(music.audioTitle) }}>delete</button>\r\n                                                {music.audioTitle}\r\n                                            </div>\r\n                                            <div>{music.artist}</div>\r\n                                            <div>{music.album}</div>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n                        </div>\r\n                        <div id=\"selectMusic\" style={{marginTop: \"20px\"}}>\r\n                        \r\n                            <h3>\r\n                                Add music from your computer \r\n                            </h3>\r\n                            <input type=\"text\" placeholder=\"Title\" style={{color:\"black\", width: \"200px\"}} onChange={handleTitleChange} />\r\n                            <input type=\"text\" placeholder=\"Artist\" style={{color:\"black\", width: \"200px\"}} onChange={handleArtistChange}/>\r\n                            <input type=\"text\" placeholder=\"Album\" style={{color:\"black\", width: \"200px\"}} onChange={handleAlbumChange}/>\r\n                            <div style={{display:\"flex\", flexDirection:\"row\", justifyContent:\"space-between\", margin:\"5px\"}}>\r\n                                <>\r\n                                    <p style={{margin: \"4px\"}}>Cover</p>\r\n                                    {/* <label for=\"coverFile\" style={{background:\"white\", marginLeft:\"5px\", marginRight:\"5px\"}}>Select Cover</label> */}\r\n                                    <input id=\"coverFile\" type=\"file\" style={{color:\"grey\"}} onChange={handleCoverFileChange} />\r\n                                </>\r\n                                <>\r\n                                    <p style={{margin: \"4px\"}}>Lyrics</p>\r\n                                    {/* <label for=\"lyricsFile\" style={{background:\"white\", marginLeft:\"5px\", marginRight:\"5px\"}}>Select Lyrics</label> */}\r\n                                    <input id=\"lyricsFile\" type=\"file\" style={{color:\"grey\"}} onChange={handleLyricsFileChange} />\r\n                                </>\r\n                                <>\r\n                                    <p style={{margin: \"4px\"}}>Music</p>\r\n                                    {/* <label for=\"musicFile\" style={{background:\"white\", marginLeft:\"5px\", marginRight:\"5px\"}}>Select Music</label> */}\r\n                                    <input id=\"musicFile\" type=\"file\" style={{color:\"grey\"}} onChange={handleMusicFileChange} />\r\n                                </>\r\n                            </div>\r\n                            <button style={{background:\"lightblue\"}} onClick={addMusic}>Upload</button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"row\" style={{marginTop:\"20px\"}}>\r\n                    {/* Bottom block: Audio information and control. */}\r\n                    <div className=\"col-md-12\" id='bottom'>\r\n                        <h2 style={{color: 'white'}}>{currentMusic === null ? fileName : currentMusic.audioTitle}</h2>\r\n                        <p>Artist: {currentMusic === null ? \"unknown\" : currentMusic.artist}</p>\r\n                        <p>Album: {currentMusic === null ? \"unknown\" : currentMusic.album}</p>\r\n\r\n\r\n                        <button onClick={handlePlayClick} disabled={isPlayingMusic || (!audioData)}>\r\n                            Play\r\n                        </button>\r\n                        <button onClick={handlePauseClick} disabled={!isPlayingMusic || (!audioSource)}>\r\n                            Pause\r\n                        </button>\r\n                        <button onClick={handleStopClick} disabled={(!audioSource)}>\r\n                            Stop\r\n                        </button>\r\n                        <input\r\n                            type=\"range\"\r\n                            min=\"0\"\r\n                            max=\"1\"\r\n                            step=\"0.01\"\r\n                            value={volumeLevel}\r\n                            onChange={handleVolumeChange}\r\n                        />\r\n                        <button id=\"single\" onClick={() => { setPlayMode('single') }} disabled={playMode === 'single'}>Single</button>\r\n                        <button id=\"loop\" onClick={() => { setPlayMode('loop') }} disabled={playMode === 'loop'}>Loop</button>\r\n                        <button id=\"random\" onClick={() => { setPlayMode('random') }} disabled={playMode === 'random'}>Random</button>\r\n                        <div>\r\n                            <input\r\n                                type=\"range\"\r\n                                id=\"progressBar\"\r\n                                min=\"0\"\r\n                                max={audioData ? audioData.duration : 0}\r\n                                step=\"0.01\"\r\n                                style={{ width: \"300px\", height:\"40px\" }}\r\n                                onChange={setProgressBar}\r\n                            >\r\n                            </input>\r\n                            <p style={{color:\"white\"}}>{numberToTime(currentTime)} / {numberToTime(duration)}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{height:\"250px\"}}>\r\n                    <Client/>\r\n                </div>\r\n            </div>\r\n            \r\n\r\n\r\n\r\n\r\n\r\n            {/* Debug: Audio data. */}\r\n            {/* {\r\n                audioData && (\r\n                    <div>\r\n                        <p>File Name: {fileName}</p>\r\n                        <p>File Format: {musicFormat}</p>\r\n                        <p>Audio Format: {audioData.format}</p>\r\n                        <p>Number of Channels: {audioData.numChannels}</p>\r\n                        <p>Sample Rate: {audioData.sampleRate}</p>\r\n                        <p>Byte Rate: {audioData.byteRate}</p>\r\n                        <p>Block Align: {audioData.blockAlign}</p>\r\n                        <p>Bit Depth: {audioData.bitDepth}</p>\r\n                    </div>\r\n                )\r\n            } */}\r\n        </div >\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}