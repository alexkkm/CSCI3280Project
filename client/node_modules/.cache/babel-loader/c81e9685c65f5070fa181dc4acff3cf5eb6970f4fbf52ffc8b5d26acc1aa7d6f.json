{"ast":null,"code":"// Decode a WAV audio file into an object containing its properties and audio data, with optional volume modification\nexport const DecodeWav = async function (file) {\n  let volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  // Create a promise to handle asynchronous code\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    // Set an onload function to handle the file once it has been loaded\n    fileReader.onload = () => {\n      // Get the raw binary data of the audio file\n      const audioArrayBuffer = fileReader.result;\n\n      // Create a new data view object to interpret the binary data\n      const audioDataView = new DataView(audioArrayBuffer);\n\n      // Extract properties from the data view object\n      const format = audioDataView.getUint16(20, true);\n      const numChannels = audioDataView.getUint16(22, true);\n      const sampleRate = audioDataView.getUint32(24, true);\n      const byteRate = audioDataView.getUint32(28, true);\n      const blockAlign = audioDataView.getUint16(32, true);\n      const bitDepth = audioDataView.getUint16(34, true);\n\n      // Define the offset and length of the audio data\n      const dataOffset = 44;\n      const dataLength = audioArrayBuffer.byteLength - dataOffset;\n      const duration = dataLength / byteRate;\n\n      // Create a new Float32Array to store the audio data\n      const audioData = new Float32Array(dataLength / 2);\n\n      // Extract the audio data from the binary data and convert it to a float between -1 and 1, with optional volume modification\n      for (let i = 0; i < dataLength; i += 2) {\n        audioData[i / 2] = audioDataView.getInt16(i + dataOffset, true) / 32767 * volume; // 32767 is the maximum value for a 16-bit integer\n      }\n\n      // Resolve the promise with an object containing the audio file properties and data\n      resolve({\n        format,\n        numChannels,\n        sampleRate,\n        byteRate,\n        blockAlign,\n        bitDepth,\n        audioData,\n        duration\n      });\n    };\n\n    // Set an onerror function to reject the promise if an error occurs\n    fileReader.onerror = reject;\n    fileReader.readAsArrayBuffer(file);\n  });\n};\n_c = DecodeWav;\nvar _c;\n$RefreshReg$(_c, \"DecodeWav\");","map":{"version":3,"names":["DecodeWav","file","volume","arguments","length","undefined","Promise","resolve","reject","fileReader","FileReader","onload","audioArrayBuffer","result","audioDataView","DataView","format","getUint16","numChannels","sampleRate","getUint32","byteRate","blockAlign","bitDepth","dataOffset","dataLength","byteLength","duration","audioData","Float32Array","i","getInt16","onerror","readAsArrayBuffer","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/文件/GitHub/CSCI3280Project/client/src/AudioScript/WavDecoder.js"],"sourcesContent":["// Decode a WAV audio file into an object containing its properties and audio data, with optional volume modification\r\nexport const DecodeWav = async (file, volume = 1) => {\r\n\r\n  // Create a promise to handle asynchronous code\r\n  return new Promise((resolve, reject) => {\r\n\r\n    const fileReader = new FileReader();\r\n\r\n    // Set an onload function to handle the file once it has been loaded\r\n    fileReader.onload = () => {\r\n\r\n      // Get the raw binary data of the audio file\r\n      const audioArrayBuffer = fileReader.result;\r\n\r\n      // Create a new data view object to interpret the binary data\r\n      const audioDataView = new DataView(audioArrayBuffer);\r\n\r\n      // Extract properties from the data view object\r\n      const format = audioDataView.getUint16(20, true);\r\n      const numChannels = audioDataView.getUint16(22, true);\r\n      const sampleRate = audioDataView.getUint32(24, true);\r\n      const byteRate = audioDataView.getUint32(28, true);\r\n      const blockAlign = audioDataView.getUint16(32, true);\r\n      const bitDepth = audioDataView.getUint16(34, true);\r\n\r\n      // Define the offset and length of the audio data\r\n      const dataOffset = 44;\r\n      const dataLength = audioArrayBuffer.byteLength - dataOffset;\r\n\r\n      const duration = dataLength / byteRate;\r\n\r\n      // Create a new Float32Array to store the audio data\r\n      const audioData = new Float32Array(dataLength / 2);\r\n\r\n      // Extract the audio data from the binary data and convert it to a float between -1 and 1, with optional volume modification\r\n      for (let i = 0; i < dataLength; i += 2) {\r\n        audioData[i / 2] = (audioDataView.getInt16(i + dataOffset, true) / 32767) * volume; // 32767 is the maximum value for a 16-bit integer\r\n      }\r\n\r\n      // Resolve the promise with an object containing the audio file properties and data\r\n      resolve({ format, numChannels, sampleRate, byteRate, blockAlign, bitDepth, audioData, duration });\r\n    };\r\n\r\n    // Set an onerror function to reject the promise if an error occurs\r\n    fileReader.onerror = reject;\r\n    fileReader.readAsArrayBuffer(file);\r\n  });\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAG,eAAAA,CAAOC,IAAI,EAAiB;EAAA,IAAfC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAE9C;EACA,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAEtC,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;;IAEnC;IACAD,UAAU,CAACE,MAAM,GAAG,MAAM;MAExB;MACA,MAAMC,gBAAgB,GAAGH,UAAU,CAACI,MAAM;;MAE1C;MACA,MAAMC,aAAa,GAAG,IAAIC,QAAQ,CAACH,gBAAgB,CAAC;;MAEpD;MACA,MAAMI,MAAM,GAAGF,aAAa,CAACG,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC;MAChD,MAAMC,WAAW,GAAGJ,aAAa,CAACG,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC;MACrD,MAAME,UAAU,GAAGL,aAAa,CAACM,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC;MACpD,MAAMC,QAAQ,GAAGP,aAAa,CAACM,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC;MAClD,MAAME,UAAU,GAAGR,aAAa,CAACG,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC;MACpD,MAAMM,QAAQ,GAAGT,aAAa,CAACG,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC;;MAElD;MACA,MAAMO,UAAU,GAAG,EAAE;MACrB,MAAMC,UAAU,GAAGb,gBAAgB,CAACc,UAAU,GAAGF,UAAU;MAE3D,MAAMG,QAAQ,GAAGF,UAAU,GAAGJ,QAAQ;;MAEtC;MACA,MAAMO,SAAS,GAAG,IAAIC,YAAY,CAACJ,UAAU,GAAG,CAAC,CAAC;;MAElD;MACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,EAAEK,CAAC,IAAI,CAAC,EAAE;QACtCF,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC,GAAIhB,aAAa,CAACiB,QAAQ,CAACD,CAAC,GAAGN,UAAU,EAAE,IAAI,CAAC,GAAG,KAAK,GAAItB,MAAM,CAAC,CAAC;MACtF;;MAEA;MACAK,OAAO,CAAC;QAAES,MAAM;QAAEE,WAAW;QAAEC,UAAU;QAAEE,QAAQ;QAAEC,UAAU;QAAEC,QAAQ;QAAEK,SAAS;QAAED;MAAS,CAAC,CAAC;IACnG,CAAC;;IAED;IACAlB,UAAU,CAACuB,OAAO,GAAGxB,MAAM;IAC3BC,UAAU,CAACwB,iBAAiB,CAAChC,IAAI,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC;AAACiC,EAAA,GA9CWlC,SAAS;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}