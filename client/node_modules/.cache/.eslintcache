[{"C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\index.jsx":"1","C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\AudioPlayer.js":"2","C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\LrcDisplayer.js":"3","C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\WavDecoder.js":"4","C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\MusicVisualizer.js":"5","C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\Client.js":"6"},{"size":529,"mtime":1682932873289,"results":"7","hashOfConfig":"8"},{"size":28791,"mtime":1682936021494,"results":"9","hashOfConfig":"8"},{"size":4309,"mtime":1682893063973,"results":"10","hashOfConfig":"8"},{"size":2110,"mtime":1682851410036,"results":"11","hashOfConfig":"8"},{"size":2234,"mtime":1682851410036,"results":"12","hashOfConfig":"8"},{"size":1167,"mtime":1682935719817,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6r6bmt",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\index.jsx",[],[],"C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\AudioPlayer.js",["33","34","35","36","37"],[],"C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\LrcDisplayer.js",["38"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nfunction LrcDisplayer({ music, currentTime }) {\r\n\r\n  var lyricsTextFilePath = music.lyricsPath;\r\n\r\n  const [lyrics, setLyrics] = useState([]);\r\n  const [currentLyricsIndex, setCurrentLyricsIndex] = useState(-1);\r\n\r\n  useEffect(() => {\r\n    if (lyricsTextFilePath === undefined || lyricsTextFilePath === null || lyricsTextFilePath === '') {\r\n      return;\r\n    }\r\n    // fetch lyrics text file and parse it\r\n    if (lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt') {\r\n      if (lyricsTextFilePath.substring(0, 9) === 'blob:http') \r\n        lyricsTextFilePath = lyricsTextFilePath.substring(0, lyricsTextFilePath.length - 4);\r\n      // fetch lyrics text file and set as lyrics state variable\r\n      console.log(lyricsTextFilePath);\r\n      fetch(lyricsTextFilePath)\r\n        .then(response => response.text())\r\n        .then(text => setLyrics([{ time: 0, text }]));\r\n    }\r\n    else { // lrc file\r\n      if (lyricsTextFilePath.substring(0, 9) === 'blob:http') \r\n        lyricsTextFilePath = lyricsTextFilePath.substring(0, lyricsTextFilePath.length - 4);\r\n      console.log(lyricsTextFilePath);\r\n      fetch(lyricsTextFilePath)\r\n        .then(response => response.text())\r\n        .then(text => {\r\n          const dummyStart = ['[00:00.00].\\n', '[00:00.00]... \\n'];\r\n          const dummyEnd = ['[99:99.99]... \\n', '[99:99.99]. '];\r\n          const lyricsArray = dummyStart.concat(text.split('\\n')).concat(dummyEnd);\r\n          const regex = /\\[(\\d{2}):(\\d{2})\\.(\\d{2,3})\\](.*)/;\r\n          const parsedLyrics = lyricsArray.reduce((acc, line) => {\r\n\r\n            const match = line.match(regex);\r\n            if (match) {\r\n              const minutes = parseInt(match[1], 10);\r\n              const seconds = parseInt(match[2], 10);\r\n              const milliseconds = parseInt(match[3], 10);\r\n              let text = match[4];\r\n              const time = minutes * 60 + seconds + milliseconds / 1000;\r\n              acc.push({ time, text });\r\n            }\r\n            return acc;\r\n          }, []);\r\n          setLyrics(parsedLyrics);\r\n        });\r\n    }\r\n  }, [lyricsTextFilePath]);\r\n\r\n  useEffect(() => {\r\n    if (lyricsTextFilePath === undefined || lyricsTextFilePath === null || lyricsTextFilePath === '') {\r\n      return;\r\n    }\r\n    if (lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt') {\r\n      return;\r\n    }\r\n    // find the current lyrics based on the current time\r\n    const currentLyricsIndex = lyrics.findIndex((l, i) => {\r\n      const nextLyricsTime = lyrics[i + 1] ? lyrics[i + 1].time : Infinity;\r\n      return l.time <= currentTime && nextLyricsTime > currentTime;\r\n    });\r\n    setCurrentLyricsIndex(currentLyricsIndex);\r\n  }, [lyrics, currentTime, lyricsTextFilePath]);\r\n\r\n  const getLyricsToDisplay = () => {\r\n    if (lyricsTextFilePath === undefined || lyricsTextFilePath === null || lyricsTextFilePath === '') {\r\n      return [];\r\n    }\r\n    if (lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt') {\r\n      return lyrics;\r\n    }\r\n\r\n    if (lyrics.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (lyrics.length <= 5) {\r\n      return lyrics;\r\n    }\r\n\r\n    if (currentLyricsIndex === -1 || currentLyricsIndex < 2) {\r\n      // show first 5 lyrics if currentLyrics is not found or it's within the first 2 lyrics\r\n      return lyrics.slice(0, 5);\r\n    }\r\n\r\n    if (currentLyricsIndex >= lyrics.length - 2) {\r\n      // show last 5 lyrics if currentLyrics is within the last 2 lyrics\r\n      return lyrics.slice(lyrics.length - 5, lyrics.length);\r\n    }\r\n\r\n    // show 2 lyrics before, currentLyrics, and 2 lyrics after\r\n    return lyrics.slice(currentLyricsIndex - 2, currentLyricsIndex + 3);\r\n  };\r\n\r\n  const lyricsToDisplay = getLyricsToDisplay();\r\n\r\n  return (\r\n    <div style={{ maxHeight: '400px', maxWidth: '400px', overflow: 'auto' }}>\r\n      {lyricsToDisplay.map((lyric, index) => (\r\n        <p key={index} style={lyricsTextFilePath.substring(lyricsTextFilePath.length - 4) === '.txt' ?\r\n          { textAlign: 'center', whiteSpace: 'pre-wrap' } :\r\n          { textAlign: 'center', fontWeight: currentLyricsIndex === lyrics.indexOf(lyric) ? 'bold' : 'normal' }}>\r\n          {lyric.text}\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LrcDisplayer;","C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\WavDecoder.js",[],[],"C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\MusicVisualizer.js",[],[],"C:\\Users\\User\\OneDrive\\文件\\GitHub\\CSCI3280Project\\client\\src\\AudioScript\\Client.js",[],[],{"ruleId":"39","severity":1,"message":"40","line":147,"column":11,"nodeType":"41","messageId":"42","endLine":147,"endColumn":20},{"ruleId":"39","severity":1,"message":"43","line":188,"column":11,"nodeType":"41","messageId":"42","endLine":188,"endColumn":27},{"ruleId":"39","severity":1,"message":"44","line":195,"column":13,"nodeType":"41","messageId":"42","endLine":195,"endColumn":25},{"ruleId":"45","severity":1,"message":"46","line":196,"column":31,"nodeType":"47","messageId":"48","endLine":196,"endColumn":33},{"ruleId":"49","severity":1,"message":"50","line":481,"column":8,"nodeType":"51","endLine":481,"endColumn":96,"suggestions":"52"},{"ruleId":"49","severity":1,"message":"53","line":17,"column":30,"nodeType":"54","endLine":17,"endColumn":92},"no-unused-vars","'loadMusic' is assigned a value but never used.","Identifier","unusedVar","'handleFileChange' is assigned a value but never used.","'isMusicExist' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadAndPlayMusic'. Either include it or remove the dependency array.","ArrayExpression",["55"],"Assignments to the 'lyricsTextFilePath' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",{"desc":"56","fix":"57"},"Update the dependencies array to be: [audioContext, audioData, audioSource, currentMusic, loadAndPlayMusic, musicFormat, playMode, volumeLevel]",{"range":"58","text":"59"},[19058,19146],"[audioContext, audioData, audioSource, currentMusic, loadAndPlayMusic, musicFormat, playMode, volumeLevel]"]